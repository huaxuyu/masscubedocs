<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MassCube â€“ APIs reference</title>
    <link>https://example.org/docs/api/</link>
    <description>Recent content in APIs reference on MassCube</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="https://example.org/docs/api/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>alignment</title>
      <link>https://example.org/docs/api/alignment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/api/alignment/</guid>
      <description>
        
        
        &lt;h2&gt;Overview&lt;span class=&#34;absolute -mt-20&#34; id=&#34;overview&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#overview&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This module provides functionality for aligning metabolic features from different samples in mass spectrometry data.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Feature alignment&lt;/strong&gt;: Align features across different samples, considering parameters like m/z tolerance and retention time tolerance.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Gap filling&lt;/strong&gt;: Fill in missing features across aligned samples using various strategies.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Merge features&lt;/strong&gt;: Clean feature table by merging features with almost the same m/z and retention time.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Retention time correction&lt;/strong&gt;: Correct retention times to align features more accurately.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Output feature table&lt;/strong&gt;: Save the aligned features to a file.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Classes&lt;span class=&#34;absolute -mt-20&#34; id=&#34;classes&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#classes&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;&lt;code&gt;AlignedFeature&lt;/code&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;alignedfeature&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#alignedfeature&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;A class to model a feature in mass spectrometry data. Generally, a feature is defined as a unique pair of m/z and retention time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Attributes:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;feature_id_arr&lt;/code&gt; (np.array): Feature ID from individual files (-1 if not detected or gap filled).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mz_arr&lt;/code&gt; (np.array): m/z values.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rt_arr&lt;/code&gt; (np.array): Retention times.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scan_idx_arr&lt;/code&gt; (np.array): Scan index of the peak apex.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;peak_height_arr&lt;/code&gt; (np.array): Peak height.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;peak_area_arr&lt;/code&gt; (np.array): Peak area.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;top_average_arr&lt;/code&gt; (np.array): Average of the highest three intensities.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ms2_seq&lt;/code&gt; (list): Representative MS2 spectrum from each file (default: highest total intensity).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;length_arr&lt;/code&gt; (np.array): Length (i.e. non-zero scans in the peak).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gaussian_similarity_arr&lt;/code&gt; (np.array): Gaussian similarity.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;noise_score_arr&lt;/code&gt; (np.array): Noise score.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;asymmetry_factor_arr&lt;/code&gt; (np.array): Asymmetry factor.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sse_arr&lt;/code&gt; (np.array): Squared error to the smoothed curve.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_segmented_arr&lt;/code&gt; (np.array): Whether the peak is segmented.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;id&lt;/code&gt; (int): Index of the feature.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;feature_group_id&lt;/code&gt; (int): Feature group ID.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mz&lt;/code&gt; (float): m/z.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rt&lt;/code&gt; (float): Retention time.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reference_file&lt;/code&gt; (str): The reference file with the highest peak height.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;reference_scan_idx&lt;/code&gt; (int): The scan index of the peak apex from the reference file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;highest_intensity&lt;/code&gt; (float): The highest peak height from individual files (which is the reference file).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ms2&lt;/code&gt; (str): Representative MS2 spectrum.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ms2_reference_file&lt;/code&gt; (str): The reference file for the representative MS2 spectrum.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gaussian_similarity&lt;/code&gt; (float): Gaussian similarity from the reference file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;noise_score&lt;/code&gt; (float): Noise level from the reference file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;asymmetry_factor&lt;/code&gt; (float): Asymmetry factor from the reference file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;detection_rate&lt;/code&gt; (float): Number of detected files / total number of files (blank not included).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;detection_rate_gap_filled&lt;/code&gt; (float): Number of detected files after gap filling / total number of files (blank not included).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;charge_state&lt;/code&gt; (int): Charge state.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_isotope&lt;/code&gt; (bool): Whether it is an isotope.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isotope_signals&lt;/code&gt; (list): Isotope signals [[m/z, intensity], &amp;hellip;].&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_in_source_fragment&lt;/code&gt; (bool): Whether it is an in-source fragment.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;adduct_type&lt;/code&gt; (str): Adduct type.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;annotation_algorithm&lt;/code&gt; (str): Annotation algorithm. Not used now.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;search_mode&lt;/code&gt; (str): &amp;lsquo;identity search&amp;rsquo;, &amp;lsquo;fuzzy search&amp;rsquo;, or &amp;lsquo;mzrt_search&amp;rsquo;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;similarity&lt;/code&gt; (float): Similarity score (0-1).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;annotation&lt;/code&gt; (str): Name of annotated compound.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;formula&lt;/code&gt; (str): Molecular formula.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;matched_peak_number&lt;/code&gt; (int): Number of matched peaks.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;smiles&lt;/code&gt; (str): SMILES.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inchikey&lt;/code&gt; (str): InChIKey.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;matched_precursor_mz&lt;/code&gt; (float): Matched precursor m/z.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;matched_adduct_type&lt;/code&gt; (str): Matched adduct type.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;matched_ms2&lt;/code&gt; (str): Matched ms2 spectra.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Functions&lt;span class=&#34;absolute -mt-20&#34; id=&#34;functions&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#functions&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;feature_alignment&lt;span class=&#34;absolute -mt-20&#34; id=&#34;feature_alignment&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#feature_alignment&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;feature_alignment(path: str, params: Params)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Align the features from multiple processed single files as .txt format.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt; (str): The path to the feature tables of individual files.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;params&lt;/code&gt; (Params object): The parameters for alignment including sample names and sample groups.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;features&lt;/code&gt; (list of AlignedFeature objects)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;gap_filling&lt;span class=&#34;absolute -mt-20&#34; id=&#34;gap_filling&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#gap_filling&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;gap_filling(features, params: Params)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Fill the gaps for aligned features.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;features&lt;/code&gt; (list of AlignedFeature objects): The aligned features.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parameters&lt;/code&gt; (Params object): The parameters used for gap filling.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;features&lt;/code&gt; (list of AlignedFeature objects).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;merge_features&lt;span class=&#34;absolute -mt-20&#34; id=&#34;merge_features&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#merge_features&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;merge_features(features: list, params: Params)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Clean features by merging features with almost the same m/z and retention time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;features&lt;/code&gt; (list of AlignedFeature objects): The aligned features.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;params&lt;/code&gt; (Params object): The parameters used for merging features.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;features (list of AlignedFeature objects).&lt;/p&gt;
&lt;h3&gt;convert_features_to_df&lt;span class=&#34;absolute -mt-20&#34; id=&#34;convert_features_to_df&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#convert_features_to_df&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;convert_features_to_df(features, sample_names, quant_method=&amp;quot;peak_height&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Convert the aligned features to a DataFrame.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;features&lt;/code&gt; (list of AlignedFeature objects): The aligned features.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sample_names&lt;/code&gt; (list): The sample names.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;quant_method&lt;/code&gt; (str): The quantification method, &amp;ldquo;peak_height&amp;rdquo;, &amp;ldquo;peak_area&amp;rdquo; or &amp;ldquo;top_average&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;feature_table&lt;/code&gt; (pd.DataFrame): The feature DataFrame.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;output_feature_to_msp&lt;span class=&#34;absolute -mt-20&#34; id=&#34;output_feature_to_msp&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#output_feature_to_msp&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;output_feature_to_msp(feature_table, output_path)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Output MS2 spectra to MSP format.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;feature_table&lt;/code&gt; (pd.DataFrame): The feature table.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;output_path&lt;/code&gt; (str): The path to the output MSP file.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;output_feature_table&lt;span class=&#34;absolute -mt-20&#34; id=&#34;output_feature_table&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#output_feature_table&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;output_feature_table(feature_table, output_path)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Output the aligned feature table.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;feature_table&lt;/code&gt; (pd.DataFrame): The aligned feature table.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;output_path&lt;/code&gt; (str): The path to save the aligned feature table.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;retention_time_correction&lt;span class=&#34;absolute -mt-20&#34; id=&#34;retention_time_correction&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#retention_time_correction&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;retention_time_correction(mz_ref, rt_ref, mz_arr, rt_arr, mz_tol=0.01, rt_tol=2.0, mode=&#39;linear_interpolation&#39;, rt_max=None)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Correct retention times for feature alignment. There are three steps including (1) finding the selected anchors in the given data, (2) creating a model to correct retention times, and (3) correcting retention times.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mz_ref&lt;/code&gt; (np.array): The m/z values of the selected anchors from another reference file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rt_ref&lt;/code&gt; (np.array): The retention times of the selected anchors from another reference file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mz_arr&lt;/code&gt; (np.array): Feature m/z values in the current file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rt_arr&lt;/code&gt; (np.array): Feature retention times in the current file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mz_tol&lt;/code&gt; (float): The m/z tolerance for selecting anchors.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rt_tol&lt;/code&gt; (float): The retention time tolerance for selecting anchors.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mode&lt;/code&gt; (str): The mode for retention time correction. Only &amp;rsquo;linear_interpolation&amp;rsquo; is available now.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rt_max&lt;/code&gt; (float): End of the retention time range.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rt_arr&lt;/code&gt; (np.array): The corrected retention times.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;f&lt;/code&gt; (interp1d): The model for retention time correction.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;rt_anchor_selection&lt;span class=&#34;absolute -mt-20&#34; id=&#34;rt_anchor_selection&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#rt_anchor_selection&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;rt_anchor_selection(data_path, num=50, noise_score_tol=0.1, mz_tol=0.01)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Select retention time anchors from the feature tables. Retention time anchors have unique m/z values and low noise scores. From all candidate features, the top &lt;em&gt;num&lt;/em&gt; features with the highest peak heights are selected as anchors.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;data_path&lt;/code&gt; (str): The absolute directory to the feature tables.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;num&lt;/code&gt; (int): The number of anchors to be selected.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;noise_score_tol&lt;/code&gt; (float): The noise level for the anchors.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mz_tol&lt;/code&gt; (float): The m/z tolerance for selecting anchors.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;anchors&lt;/code&gt; (list): A list of anchors (dict) for retention time correction.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>annotation</title>
      <link>https://example.org/docs/api/annotation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/api/annotation/</guid>
      <description>
        
        
        &lt;h2&gt;Overview&lt;span class=&#34;absolute -mt-20&#34; id=&#34;overview&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#overview&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This module is designed for annotating metabolites based on their m/z, retention time, and MS/MS spectra.&lt;/p&gt;
&lt;h2&gt;Functions&lt;span class=&#34;absolute -mt-20&#34; id=&#34;functions&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#functions&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;load_ms2_db&lt;span class=&#34;absolute -mt-20&#34; id=&#34;load_ms2_db&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#load_ms2_db&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;load_ms2_db(path)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Load MS2 database in pickle, msp, or json format.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt; (str): The path to the MS2 database.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;entropy_search&lt;/code&gt; (FlashEntropySearch object): The MS2 database.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;annotate_aligned_features&lt;span class=&#34;absolute -mt-20&#34; id=&#34;annotate_aligned_features&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#annotate_aligned_features&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;annotate_aligned_features(features, params, num=5)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Annotate feature&amp;rsquo;s MS2 using database.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;features&lt;/code&gt; (list): A list of AlignedFeature objects.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;params&lt;/code&gt; (Params object): The parameters for the workflow.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;num&lt;/code&gt; (int): The number of top MS2 spectra to search.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;features&lt;/code&gt; (list): A list of AlignedFeature objects with MS2 annotation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;annotate_features&lt;span class=&#34;absolute -mt-20&#34; id=&#34;annotate_features&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#annotate_features&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Annotate features from a single raw data file using MS2 database.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;annotate_features(d, sim_tol=None, fuzzy_search=True, ms2_library_path=None)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;d&lt;/code&gt; (MSData object): MS data file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sim_tol&lt;/code&gt; (float): The similarity threshold for MS2 annotation. If not specified, the corresponding parameter from the MS data file will be used.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fuzzy_search&lt;/code&gt; (bool): Whether to further annotated the unmatched MS2 using fuzzy search.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ms2_library_path&lt;/code&gt; (str): The absolute path to the MS2 database. If not specified, the corresponding parameter from the MS data file will be used.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;annotate_ms2&lt;span class=&#34;absolute -mt-20&#34; id=&#34;annotate_ms2&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#annotate_ms2&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Annotate MS2 spectra using MS2 database.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;annotate_ms2(ms2, ms2_library_path, sim_tol=0.7, fuzzy_search=True)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ms2&lt;/code&gt; (Scan object): MS2 spectrum.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ms2_library_path&lt;/code&gt; (str): The absolute path to the MS2 database. If not specified, the corresponding parameter from the MS data file will be used.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sim_tol&lt;/code&gt; (float): The similarity threshold for MS2 annotation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fuzzy_search&lt;/code&gt; (bool): Whether to further annotated the unmatched MS2 using fuzzy search.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;score&lt;/code&gt; (float): The similarity score.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;matched&lt;/code&gt; (dict): The matched MS2 spectrum.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;matched_peak_num&lt;/code&gt; (int): The number of matched peaks.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;search_mode&lt;/code&gt; (str): The search mode, &amp;lsquo;identity_search&amp;rsquo; or &amp;lsquo;fuzzy_search&amp;rsquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;feature_annotation_mzrt&lt;span class=&#34;absolute -mt-20&#34; id=&#34;feature_annotation_mzrt&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#feature_annotation_mzrt&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;feature_annotation_mzrt(features, path, mz_tol=0.01, rt_tol=0.3)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Annotate features based on a mzrt file (only .csv is supported now)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;features&lt;/code&gt; (list): A list of features.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt; (str): The path to the mzrt file in csv format.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mz_tol&lt;/code&gt; (float): The m/z tolerance for matching.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rt_tol&lt;/code&gt; (float): The RT tolerance for matching.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;features&lt;/code&gt; (list): A list of features with annotation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;feature_to_feature_search&lt;span class=&#34;absolute -mt-20&#34; id=&#34;feature_to_feature_search&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#feature_to_feature_search&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;feature_to_feature_search(feature_list)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Calculate the MS2 similarity between features using fuzzy search.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;feature_list&lt;/code&gt; (list): A list of AlignedFeature objects.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;similarity_matrix&lt;/code&gt; (pandas.DataFrame): A DataFrame containing the similarity matrix between features.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;index_feature_list&lt;span class=&#34;absolute -mt-20&#34; id=&#34;index_feature_list&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#index_feature_list&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;index_feature_list(feature_list)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A helper function to index a list of features for spectrum entropy search.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;feature_list&lt;/code&gt; (list): A list of AlignedFeature objects.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;entropy_search&lt;/code&gt; (FlashEntropySearch object): The indexed feature list.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;output_ms2_to_msp&lt;span class=&#34;absolute -mt-20&#34; id=&#34;output_ms2_to_msp&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#output_ms2_to_msp&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;output_ms2_to_msp(feature_table, output_path)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Output MS2 spectra to MSP format&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;feature_table&lt;/code&gt; (pandas.DataFrame): A DataFrame containing the MS2 spectra.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;output_path&lt;/code&gt; (str): The path to the output MSP file.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>classifier_builder</title>
      <link>https://example.org/docs/api/classifier_builder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/api/classifier_builder/</guid>
      <description>
        
        
        &lt;h2&gt;Overview&lt;span class=&#34;absolute -mt-20&#34; id=&#34;overview&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#overview&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This module provides a set of tools for building and using a random forest classifier for metabolomics data analysis. It supports feature selection, model training, cross-validation, and prediction on new data.&lt;/p&gt;
&lt;h2&gt;Functions&lt;span class=&#34;absolute -mt-20&#34; id=&#34;functions&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#functions&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;feature_selection&lt;span class=&#34;absolute -mt-20&#34; id=&#34;feature_selection&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#feature_selection&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;feature_selection(X, y, k=None)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;X&lt;/code&gt; (numpy.ndarray): The feature matrix.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;y&lt;/code&gt; (numpy.ndarray): The target variable.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;k&lt;/code&gt; (int): The number of features to select. By default, it is set to the number of samples divided by 10 (1/10 rule) and rounded up.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;X_new&lt;/code&gt; (numpy.ndarray): The selected features.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;selected_features&lt;/code&gt; (numpy.ndarray): The indices of the selected features.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;def feature_selection(X, y, k=None):
&amp;quot;&amp;quot;&amp;quot;
Select features for the classification model.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Parameters
----------
X : two-dimensional numpy array
    The feature matrix.
y : one-dimensional numpy array
    The target variable.
k : int
    The number of features to select. By default, it
    is set to the number of samples divided by 10 (1/10 rule)
    and rounded up.

Returns
-------
X_new : two-dimensional numpy array
    The fit-transformed feature matrix.
selected_features : one-dimensional numpy array
    The indices of the selected features.
&amp;quot;&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;train_rdf_model&lt;span class=&#34;absolute -mt-20&#34; id=&#34;train_rdf_model&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#train_rdf_model&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;train_rdf_model(X_train, y_train)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;X_train&lt;/code&gt; (numpy.ndarray): The feature matrix for training.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;y_train&lt;/code&gt; (numpy.ndarray): The target variable for training.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;model&lt;/code&gt; (RandomForestClassifier): The trained random forest model.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;cross_validate_model&lt;span class=&#34;absolute -mt-20&#34; id=&#34;cross_validate_model&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#cross_validate_model&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;cross_validate_model(X, y, model, k=5, random_state=0)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;X&lt;/code&gt; (numpy.ndarray): The feature matrix.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;y&lt;/code&gt; (numpy.ndarray): The target variable.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;model&lt;/code&gt; (RandomForestClassifier): The trained random forest model.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;k&lt;/code&gt; (int): The number of folds for cross-validation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;random_state&lt;/code&gt; (int): The random state for the shuffle in KFold.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scores&lt;/code&gt; (list): The accuracy scores for each fold.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;predict&lt;span class=&#34;absolute -mt-20&#34; id=&#34;predict&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#predict&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;predict(model, X_test)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;model&lt;/code&gt; (RandomForestClassifier): The trained random forest model.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;X_test&lt;/code&gt; (numpy.ndarray): The feature matrix for testing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;predictions&lt;/code&gt; (numpy.ndarray): The predicted classes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;evaluate_model&lt;span class=&#34;absolute -mt-20&#34; id=&#34;evaluate_model&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#evaluate_model&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;evaluate_model(predictions, y_test)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;predictions&lt;/code&gt; (numpy.ndarray): The predicted classes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;y_test&lt;/code&gt; (numpy.ndarray): The true classes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;accuracy&lt;/code&gt; (float): The accuracy of the model.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;build_classifier&lt;span class=&#34;absolute -mt-20&#34; id=&#34;build_classifier&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#build_classifier&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;build_classifier(path=None, by_group=None, feature_num=None, gaussian_cutoff=0.6, detection_rate_cutoff=0.9, fill_ratio=0.5, cross_validation_k=5)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt; (str): Path to the project file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;feature_num&lt;/code&gt; (int): The number of features to select for building the model.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gaussian_cutoff&lt;/code&gt; (float): The Gaussian similarity cutoff. Default is 0.6.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fill_ratio&lt;/code&gt; (float): The zero values will be replaced by the minimum value in the feature matrix times fill_ratio. Default is 0.5.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cross_validation_k&lt;/code&gt; (int): The number of folds for cross-validation. Default is 5.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;predict_samples&lt;span class=&#34;absolute -mt-20&#34; id=&#34;predict_samples&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#predict_samples&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;predict_samples(path, mz_tol=0.01, rt_tol=0.3)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt; (str): Path to the project file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mz_tol&lt;/code&gt; (float): The m/z tolerance for matching the features. Default is 0.01.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rt_tol&lt;/code&gt; (float): The retention time tolerance for matching the features. Default is 0.3.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>feature_detection</title>
      <link>https://example.org/docs/api/feature_detection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/api/feature_detection/</guid>
      <description>
        
        
        &lt;h2&gt;Overview&lt;span class=&#34;absolute -mt-20&#34; id=&#34;overview&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#overview&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Untargeted feature detection.&lt;/p&gt;
&lt;h2&gt;Classes&lt;span class=&#34;absolute -mt-20&#34; id=&#34;classes&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#classes&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;&lt;code&gt;Feature&lt;/code&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;feature&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#feature&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;A class to store a feature characterized by a unique pair of m/z and retention time.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Attributes:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;rt_seq&lt;/code&gt; (list of float): Retention time sequence.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;signals&lt;/code&gt; (list): Signal sequence organized as [[m/z, intensity], &amp;hellip;].&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;scan_idx_seq&lt;/code&gt; (list of int): Scan index sequence.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ms2_seq&lt;/code&gt; (list): MS2 spectra.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;gap_counter&lt;/code&gt; (int): Counter for the number of consecutive zeros in the peak tail.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;id&lt;/code&gt; (int): Feature ID.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;feature_group_id&lt;/code&gt; (int): Peak group ID.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;mz&lt;/code&gt; (float): m/z value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;rt&lt;/code&gt; (float): Retention time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;scan_idx&lt;/code&gt; (int): Scan index of the peak apex.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;peak_height&lt;/code&gt; (float): Peak height.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;peak_area&lt;/code&gt; (float): Peak area.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;top_average&lt;/code&gt; (float): Average of the highest three intensities.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ms2&lt;/code&gt; (object): Representative MS2 spectrum.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;length&lt;/code&gt; (int): Number of valid scans in the feature.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;gaussian_similarity&lt;/code&gt; (float): Gaussian similarity.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;noise_score&lt;/code&gt; (float): Noise score.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;asymmetry_factor&lt;/code&gt; (float): Asymmetry factor.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sse&lt;/code&gt; (float): Squared error to the smoothed curve.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;is_segmented&lt;/code&gt; (bool): Indicates if the feature is segmented.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;is_isotope&lt;/code&gt; (bool): Indicates if the feature is an isotope.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;charge_state&lt;/code&gt; (int): Charge state of the feature.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;isotope_signals&lt;/code&gt; (list): Isotope signals [[m/z, intensity], &amp;hellip;].&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;is_in_source_fragment&lt;/code&gt; (bool): Indicates if the feature is an in-source fragment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;adduct_type&lt;/code&gt; (str): Adduct type.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;annotation_algorithm&lt;/code&gt; (str): Annotation algorithm.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;search_mode&lt;/code&gt; (str): Search mode (&amp;lsquo;identity search&amp;rsquo;, &amp;lsquo;fuzzy search&amp;rsquo;, or &amp;lsquo;mzrt_search&amp;rsquo;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;similarity&lt;/code&gt; (float): Similarity score (0-1).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;annotation&lt;/code&gt; (str): Name of annotated compound.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;formula&lt;/code&gt; (str): Molecular formula.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;matched_peak_number&lt;/code&gt; (int): Number of matched peaks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;smiles&lt;/code&gt; (str): SMILES notation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;inchikey&lt;/code&gt; (str): InChIKey notation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;matched_precursor_mz&lt;/code&gt; (float): Matched precursor m/z.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;matched_ms2&lt;/code&gt; (object): Matched MS2 spectra.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;matched_adduct_type&lt;/code&gt; (str): Matched adduct type.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Methods:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;extend(self, rt, signal, scan_idx)&lt;/code&gt;: Extends the chromatographic peak with new data points.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_mz_error(self)&lt;/code&gt;: Calculates the 3*sigma error of the feature&amp;rsquo;s m/z.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_rt_error(self)&lt;/code&gt;: Calculates the 3*sigma error of the feature&amp;rsquo;s retention time.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;summarize(self, ph=True, pa=True, ta=True, g_score=True, n_score=True, a_score=True)&lt;/code&gt;: Summarizes the feature by calculating summary statistics.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;subset(self, start, end, summarize=True)&lt;/code&gt;: Keeps a subset of the feature based on start and end positions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Functions&lt;span class=&#34;absolute -mt-20&#34; id=&#34;functions&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#functions&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;&lt;code&gt;detect_features&lt;/code&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;detect_features&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#detect_features&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;detect_features(d)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Detects features in the MS data.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;d&lt;/code&gt; (MSData object): An object that contains the MS data.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;final_features&lt;/code&gt; (list of &lt;code&gt;Feature&lt;/code&gt; objects): A list of detected features.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;code&gt;segment_feature&lt;/code&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;segment_feature&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#segment_feature&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;segment_feature(feature, sigma=1.2, prominence_ratio=0.05, distance=10, peak_height_tol=1000, length_tol=5, sse_tol=0.5)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Segments a feature into multiple features based on edge detection.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;feature&lt;/code&gt; (&lt;code&gt;Feature&lt;/code&gt; object): The feature to segment.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sigma&lt;/code&gt; (float): The sigma value for the Gaussian filter. DFault is 1.2.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prominence_ratio&lt;/code&gt; (float): The prominence ratio for finding peaks. Default is 0.05.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;distance&lt;/code&gt; (int): The minimum distance between peaks. Default is 10.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;peak_height_tol&lt;/code&gt; (float): The peak height tolerance for segmentation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;length_tol&lt;/code&gt; (int): The length tolerance for segmentation. Default is 5.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sse_tol&lt;/code&gt; (float): The squared error tolerance for segmentation. Default is 0.5.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;segmented_features&lt;/code&gt; (list of &lt;code&gt;Feature&lt;/code&gt; objects): A list of segmented features.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please see the source code for more internal functions.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>feature_evaluation</title>
      <link>https://example.org/docs/api/feature_evaluation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/api/feature_evaluation/</guid>
      <description>
        
        
        &lt;h2&gt;Overview&lt;span class=&#34;absolute -mt-20&#34; id=&#34;overview&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#overview&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This module provides tools for evaluating the quality of detected features in untargeted metabolomics data. The quality metrics include Gaussian similarity, noise level, and asymmetry factor, which can help assess the reliability and robustness of detected peaks.&lt;/p&gt;
&lt;h2&gt;Functions&lt;span class=&#34;absolute -mt-20&#34; id=&#34;functions&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#functions&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;calculate_gaussian_similarity&lt;span class=&#34;absolute -mt-20&#34; id=&#34;calculate_gaussian_similarity&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#calculate_gaussian_similarity&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;calculate_gaussian_similarity(x, y)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Calculates the Gaussian similarity of a peak by comparing its shape to a Gaussian distribution (Pearson product-moment correlation coefficients).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; (numpy array): Retention time values of the peak.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;y&lt;/code&gt; (numpy array): Intensity values of the peak.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;similarity&lt;/code&gt; (float): Gaussian similarity score, where higher values indicate better similarity to a Gaussian distribution.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;calculate_noise_level&lt;span class=&#34;absolute -mt-20&#34; id=&#34;calculate_noise_level&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#calculate_noise_level&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;calculate_noise_level(y, rel_int_tol=0.05)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Calculates the noise level of a peak by observing the intensity fluctuations in the peak.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;y&lt;/code&gt; (numpy array): Intensity values of the peak.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rel_int_tol&lt;/code&gt; (float): Relative intensity tolerance to the base peak.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;noise_level&lt;/code&gt; (float): Noise level, reflecting the signal fluctuation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;calculate_asymmetry_factor&lt;span class=&#34;absolute -mt-20&#34; id=&#34;calculate_asymmetry_factor&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#calculate_asymmetry_factor&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;calculate_asymmetry_factor(y)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Calculates the asymmetry factor of the peak at 10% of the peak height.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;y&lt;/code&gt; (numpy array): Intensity values of the peak.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;asymmetry_factor&lt;/code&gt; (float): Asymmetry factor, indicating the peak shape asymmetry.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>feature_grouping</title>
      <link>https://example.org/docs/api/feature_grouping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/api/feature_grouping/</guid>
      <description>
        
        
        &lt;h2&gt;Overview&lt;span class=&#34;absolute -mt-20&#34; id=&#34;overview&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#overview&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;feature_grouping&lt;/code&gt; module provides functions to group features based on their m/z values, retention times, MS2 data, and scan-to-scan correlation. The module is designed for untargeted metabolomics workflows to group features that may represent the same compound, isotopes, in-source fragments, or adducts. The functions in this module are used to group features based on the reference file or within a single file.&lt;/p&gt;
&lt;h2&gt;Functions&lt;span class=&#34;absolute -mt-20&#34; id=&#34;functions&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#functions&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;group_features_after_alignment&lt;span class=&#34;absolute -mt-20&#34; id=&#34;group_features_after_alignment&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#group_features_after_alignment&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;group_features_after_alignment(features, params: Params)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Groups features after alignment based on the reference file. This function requires reloading the raw data to examine the scan-to-scan correlation between features. The annotated feature groups are stored in the &lt;code&gt;feature_group_id&lt;/code&gt; attribute of the AlignedFeature objects.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;features&lt;/code&gt; (list): A list of AlignedFeature objects.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;params&lt;/code&gt; (Params object): A Params object that contains the parameters for feature grouping.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;group_features_single_file&lt;span class=&#34;absolute -mt-20&#34; id=&#34;group_features_single_file&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#group_features_single_file&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;group_features_single_file(d)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Groups features from a single file based on the m/z, retention time, MS2, and scan-to-scan correlation. The annotated feature groups are stored in the &lt;code&gt;feature_group_id&lt;/code&gt; attribute of the Feature objects.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;d&lt;/code&gt; (MSData object): An MSData object containing the detected ROIs to be grouped.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;generate_search_dict&lt;span class=&#34;absolute -mt-20&#34; id=&#34;generate_search_dict&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#generate_search_dict&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;generate_search_dict(feature, adduct_form, ion_mode)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Generates a search dictionary for feature grouping based on the adduct form and ionization mode.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;feature&lt;/code&gt; (Feature object): The feature object to be grouped.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;adduct_form&lt;/code&gt; (str): The adduct form of the feature.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ion_mode&lt;/code&gt; (str): The ionization mode, either &amp;ldquo;positive&amp;rdquo; or &amp;ldquo;negative&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dict&lt;/code&gt;: A dictionary containing the possible adducts and in-source fragments.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;find_isotope_signals&lt;span class=&#34;absolute -mt-20&#34; id=&#34;find_isotope_signals&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#find_isotope_signals&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;find_isotope_signals(mz, signals, mz_tol=0.015, charge_state=1, num=5)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Finds isotope patterns from the MS1 signals based on the m/z value and intensity.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mz&lt;/code&gt; (float): The m/z value of the feature.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;signals&lt;/code&gt; (np.array): The MS1 signals as [[m/z, intensity], &amp;hellip;].&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mz_tol&lt;/code&gt; (float): The m/z tolerance to find isotopes (default 0.015 Da).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;charge_state&lt;/code&gt; (int): The charge state of the feature (default 1).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;num&lt;/code&gt; (int): The maximum number of isotopes to be found (default 5).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;numpy.array&lt;/code&gt;: The m/z and intensity of the isotopes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;scan_to_scan_cor_intensity&lt;span class=&#34;absolute -mt-20&#34; id=&#34;scan_to_scan_cor_intensity&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#scan_to_scan_cor_intensity&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;scan_to_scan_cor_intensity(a, b)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Calculates the scan-to-scan correlation between two features using Pearson correlation based on their intensity profiles.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt; (np.array): Intensity array of the first m/z.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;b&lt;/code&gt; (np.array): Intensity array of the second m/z.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;float&lt;/code&gt;: The scan-to-scan correlation between the two features.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;scan_to_scan_correlation&lt;span class=&#34;absolute -mt-20&#34; id=&#34;scan_to_scan_correlation&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#scan_to_scan_correlation&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;scan_to_scan_correlation(feature_a, feature_b)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Calculates the scan-to-scan correlation between two features using Pearson correlation based on their intensity profiles.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;feature_a&lt;/code&gt; (Feature object): The first feature object.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;feature_b&lt;/code&gt; (Feature object): The second feature object.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;float&lt;/code&gt;: The scan-to-scan correlation between the two features.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;get_charge_state&lt;span class=&#34;absolute -mt-20&#34; id=&#34;get_charge_state&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#get_charge_state&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;get_charge_state(mz_seq, valid_charge_states=[1,2])&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Determines the charge state of the isotopes based on the m/z sequence.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mz_seq&lt;/code&gt; (list): A list of m/z values of isotopes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;valid_charge_states&lt;/code&gt; (list): A list of valid charge states (default [1,2]).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt;: The charge state of the isotopes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Constants&lt;span class=&#34;absolute -mt-20&#34; id=&#34;constants&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#constants&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;&lt;code&gt;ADDUCT_POS&lt;/code&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;adduct_pos&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#adduct_pos&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;A dictionary of positive adducts with the adduct form as the key and the m/z shift, charge state, and multiplier as the values.&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;ADDUCT_NEG&lt;/code&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;adduct_neg&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#adduct_neg&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;A dictionary of negative adducts with the adduct form as the key and the m/z shift, charge state, and multiplier as the values.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>normalization</title>
      <link>https://example.org/docs/api/normalization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/api/normalization/</guid>
      <description>
        
        
        &lt;h2&gt;Overview&lt;span class=&#34;absolute -mt-20&#34; id=&#34;overview&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#overview&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This module provides functions for normalizing data, particularly in the context of mass spectrometry. There are two types of normalization including&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Sample normalization - to normalize samples with different total amounts/concentrations.&lt;/li&gt;
&lt;li&gt;Signal normalization - to address the signal drifts in the mass spectrometry data.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Functions&lt;span class=&#34;absolute -mt-20&#34; id=&#34;functions&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#functions&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;sample_normalization&lt;span class=&#34;absolute -mt-20&#34; id=&#34;sample_normalization&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#sample_normalization&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;sample_normalization(feature_table, sample_metadata=None, method=&#39;pqn&#39;, feature_selection=True)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Normalizes samples using a feature list, typically excluding blank samples.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;feature_table&lt;/code&gt; (pandas DataFrame): The feature table.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sample_metadata&lt;/code&gt; (pd.DataFrame): DataFrame containing sample metadata. See params module for details.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;method&lt;/code&gt; (str): The method to find the normalization factors. Options:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#39;pqn&#39;&lt;/code&gt;: Probabilistic Quotient Normalization.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;feature_selection&lt;/code&gt; (bool): Whether to select high-quality features for normalization. High-quality features have relative standard deviation (RSD) less than 25% in QC samples and average intensity in QC+biological samples greater than 2 fold of the average intensity in blank samples.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pandas DataFrame&lt;/code&gt;: The normalized feature table.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;find_normalization_factors&lt;span class=&#34;absolute -mt-20&#34; id=&#34;find_normalization_factors&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#find_normalization_factors&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;find_normalization_factors(array, method=&#39;pqn&#39;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Finds the normalization factors for a data frame.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;array&lt;/code&gt; (numpy array): The data to be normalized.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;method&lt;/code&gt; (str): The method to find the normalization factors. Options:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#39;pqn&#39;&lt;/code&gt;: Probabilistic Quotient Normalization.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;numpy array&lt;/code&gt;: The normalization factors.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;sample_normalization_by_factors&lt;span class=&#34;absolute -mt-20&#34; id=&#34;sample_normalization_by_factors&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#sample_normalization_by_factors&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;sample_normalization_by_factors(array, v)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Normalizes a data frame by a vector.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;array&lt;/code&gt; (numpy array): The data to be normalized.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v&lt;/code&gt; (numpy array): The normalization factor.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;numpy array&lt;/code&gt;: The normalized data.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;find_reference_sample&lt;span class=&#34;absolute -mt-20&#34; id=&#34;find_reference_sample&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#find_reference_sample&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;find_reference_sample(array, method=&#39;median_intensity&#39;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Finds the reference sample for normalization.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;array&lt;/code&gt; (numpy array): The data to be normalized.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;method&lt;/code&gt; (str): The method to find the reference sample. Options:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#39;number&#39;&lt;/code&gt;: The reference sample has the most detected features.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;total_intensity&#39;&lt;/code&gt;: The reference sample has the highest total intensity.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;median_intensity&#39;&lt;/code&gt;: The reference sample has the highest median intensity.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt;: The index of the reference sample.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;high_quality_feature_selection&lt;span class=&#34;absolute -mt-20&#34; id=&#34;high_quality_feature_selection&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#high_quality_feature_selection&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;high_quality_feature_selection(array, is_qc=None, is_blank=None, blank_ratio_tol=0.5, qc_rsd_tol=0.25)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Selects high-quality features based on provided criteria for normalization.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;array&lt;/code&gt; (numpy array): The data to be normalized. Samples are in columns and features are in rows.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_qc&lt;/code&gt; (numpy array): Boolean array indicating whether a sample is a quality control sample.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_blank&lt;/code&gt; (numpy array): Boolean array indicating whether a sample is a blank sample.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;blank_ratio_tol&lt;/code&gt; (float): The tolerance of the ratio of the average intensity in blank samples to the average intensity in QC and biological samples.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;qc_rsd_tol&lt;/code&gt; (float): The tolerance of the relative standard deviation (RSD) in QC samples.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;numpy array&lt;/code&gt;: High-quality features. Features are in rows and samples are in columns.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;numpy array&lt;/code&gt;: The index of the selected features.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;signal_normalization&lt;span class=&#34;absolute -mt-20&#34; id=&#34;signal_normalization&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#signal_normalization&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;signal_normalization(feature_table, sample_metadata, method=&#39;lowess&#39;, output_plot_path=None)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Normalizes MS signal drifts based on analytical order.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;feature_table&lt;/code&gt; (pandas DataFrame): The feature table.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sample_metadata&lt;/code&gt; (pd.DataFrame): DataFrame containing sample metadata. See params module for details.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;method&lt;/code&gt; (str): The method to find the normalization factors. Options:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#39;lowess&#39;&lt;/code&gt;: Locally Weighted Scatterplot Smoothing.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;output_plot_path&lt;/code&gt; (str): The path to save the normalization plot. If none, no visualization will be generated.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pandas DataFrame&lt;/code&gt;: The normalized feature table.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;lowess_normalization&lt;span class=&#34;absolute -mt-20&#34; id=&#34;lowess_normalization&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#lowess_normalization&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;lowess_normalization(array, qc_idx, frac=0.07, it=3)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Normalizes samples using quality control samples.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;array&lt;/code&gt; (numpy array): The data to be normalized.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;qc_idx&lt;/code&gt; (numpy array of bool): Boolean array indicating whether a sample is a quality control sample. It&amp;rsquo;s length should be the same as the length of array.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;frac&lt;/code&gt; (float): The fraction of the data used when estimating each y-value (used in lowess).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;it&lt;/code&gt; (int): The number of residual-based reweightings to perform (used in lowess).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lsquo;dict&amp;rsquo;: A dictionary containing the lowess model, the fit curve, and the normalized array: {&amp;lsquo;model&amp;rsquo;: model, &amp;lsquo;fit_curve&amp;rsquo;: y, &amp;rsquo;normed_arr&amp;rsquo;: int_arr_corr}&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/api/params/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/api/params/</guid>
      <description>
        
        
        &lt;h1&gt;&lt;code&gt;params&lt;/code&gt;&lt;/h1&gt;&lt;h2&gt;Overview&lt;span class=&#34;absolute -mt-20&#34; id=&#34;overview&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#overview&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;params&lt;/code&gt; module defines a class &lt;code&gt;Params&lt;/code&gt; that stores and manages parameters for &lt;strong&gt;mass spectrometry-based untargeted metabolomics data processing&lt;/strong&gt;. It also exposes a helper function &lt;code&gt;find_ms_info&lt;/code&gt; and two dictionaries of parameter &lt;strong&gt;ranges&lt;/strong&gt; and &lt;strong&gt;defaults&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This documentation is synchronized with the current implementation in &lt;code&gt;params.py&lt;/code&gt; and reflects &lt;strong&gt;all attributes, methods, behaviors, defaults, and edge cases&lt;/strong&gt; present in the code.&lt;/p&gt;
&lt;h2&gt;Classes&lt;span class=&#34;absolute -mt-20&#34; id=&#34;classes&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#classes&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;&lt;code&gt;Params&lt;/code&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;params-1&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#params-1&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;A configuration container for project-level and file-level processing parameters, including project setup, raw data reading/cleaning, feature detection, grouping, alignment, annotation, normalization, statistics, visualization, and output controls.&lt;/p&gt;
&lt;h2&gt;Attributes&lt;span class=&#34;absolute -mt-20&#34; id=&#34;attributes&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#attributes&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;Project &amp;amp; Metadata&lt;span class=&#34;absolute -mt-20&#34; id=&#34;project--metadata&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#project--metadata&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sample_metadata&lt;/code&gt; &lt;em&gt;(pandas.DataFrame | None)&lt;/em&gt; â€” sample table held in-memory.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;project_dir&lt;/code&gt; &lt;em&gt;(str | None)&lt;/em&gt; â€” project root directory.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sample_dir&lt;/code&gt; &lt;em&gt;(str | None)&lt;/em&gt; â€” directory for raw MS data; set during workflow prep.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;single_file_dir&lt;/code&gt; &lt;em&gt;(str | None)&lt;/em&gt; â€” outputs for single-file processing.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tmp_file_dir&lt;/code&gt; &lt;em&gt;(str | None)&lt;/em&gt; â€” temporary/intermediate files.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ms2_matching_dir&lt;/code&gt; &lt;em&gt;(str | None)&lt;/em&gt; â€” MS/MS matching outputs.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bpc_dir&lt;/code&gt; &lt;em&gt;(str | None)&lt;/em&gt; â€” base peak chromatogram outputs.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;project_file_dir&lt;/code&gt; &lt;em&gt;(str | None)&lt;/em&gt; â€” auxiliary project files (sample table with time, etc.).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;normalization_dir&lt;/code&gt; &lt;em&gt;(str | None)&lt;/em&gt; â€” normalization results.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;statistics_dir&lt;/code&gt; &lt;em&gt;(str | None)&lt;/em&gt; â€” statistical analysis results.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;problematic_files&lt;/code&gt; &lt;em&gt;(dict)&lt;/em&gt; â€” problematic files mapping &lt;code&gt;{file_name: error_message}&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Raw Data Reading &amp;amp; Cleaning&lt;span class=&#34;absolute -mt-20&#34; id=&#34;raw-data-reading--cleaning&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#raw-data-reading--cleaning&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;file_name&lt;/code&gt; &lt;em&gt;(str | None)&lt;/em&gt; â€” file name of the raw data.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_path&lt;/code&gt; &lt;em&gt;(str | None)&lt;/em&gt; â€” absolute path of the raw data.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ion_mode&lt;/code&gt; &lt;em&gt;(str)&lt;/em&gt; â€” &lt;code&gt;&amp;quot;positive&amp;quot;&lt;/code&gt; (default) or &lt;code&gt;&amp;quot;negative&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ms_type&lt;/code&gt; &lt;em&gt;(str | None)&lt;/em&gt; â€” &lt;code&gt;&amp;quot;orbitrap&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;qtof&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;tripletof&amp;quot;&lt;/code&gt;, or &lt;code&gt;&amp;quot;others&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_centroid&lt;/code&gt; &lt;em&gt;(bool)&lt;/em&gt; â€” whether data is centroided (&lt;code&gt;True&lt;/code&gt; by default).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_format&lt;/code&gt; &lt;em&gt;(str | None)&lt;/em&gt; â€” lower-case type (&lt;code&gt;&amp;quot;mzml&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;mzxml&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;mzjson&amp;quot;&lt;/code&gt;, or &lt;code&gt;&amp;quot;mzjson.gz&amp;quot;&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scan_time_unit&lt;/code&gt; &lt;em&gt;(str)&lt;/em&gt; â€” &lt;code&gt;&amp;quot;minute&amp;quot;&lt;/code&gt; (default) or &lt;code&gt;&amp;quot;second&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mz_lower_limit&lt;/code&gt; &lt;em&gt;(float)&lt;/em&gt; â€” lower m/z bound (default &lt;code&gt;0.0&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mz_upper_limit&lt;/code&gt; &lt;em&gt;(float)&lt;/em&gt; â€” upper m/z bound (default &lt;code&gt;100000.0&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rt_lower_limit&lt;/code&gt; &lt;em&gt;(float)&lt;/em&gt; â€” lower RT bound in minutes (default &lt;code&gt;0.0&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rt_upper_limit&lt;/code&gt; &lt;em&gt;(float)&lt;/em&gt; â€” upper RT bound in minutes (default &lt;code&gt;10000.0&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scan_levels&lt;/code&gt; &lt;em&gt;(list[int])&lt;/em&gt; â€” scan levels to read (default &lt;code&gt;[1, 2]&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;centroid_mz_tol&lt;/code&gt; &lt;em&gt;(float | None)&lt;/em&gt; â€” m/z tolerance for centroiding (&lt;code&gt;0.005&lt;/code&gt; by default; set &lt;code&gt;None&lt;/code&gt; to disable centroiding).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ms1_abs_int_tol&lt;/code&gt; &lt;em&gt;(float)&lt;/em&gt; â€” MS1 absolute intensity threshold (recommend &lt;code&gt;30000&lt;/code&gt; Orbitrap, &lt;code&gt;1000&lt;/code&gt; QTOF).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ms2_abs_int_tol&lt;/code&gt; &lt;em&gt;(float)&lt;/em&gt; â€” MS2 absolute intensity threshold (recommend &lt;code&gt;10000&lt;/code&gt; Orbitrap, &lt;code&gt;500&lt;/code&gt; QTOF).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ms2_rel_int_tol&lt;/code&gt; &lt;em&gt;(float)&lt;/em&gt; â€” MS2 relative intensity to base peak (default &lt;code&gt;0.01&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;precursor_mz_offset&lt;/code&gt; &lt;em&gt;(float)&lt;/em&gt; â€” m/z offset for defining MS2 range (default &lt;code&gt;2.0&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Feature Detection&lt;span class=&#34;absolute -mt-20&#34; id=&#34;feature-detection&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#feature-detection&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mz_tol_ms1&lt;/code&gt; &lt;em&gt;(float)&lt;/em&gt; â€” MS1 m/z tolerance (default &lt;code&gt;0.01&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mz_tol_ms2&lt;/code&gt; &lt;em&gt;(float)&lt;/em&gt; â€” MS2 m/z tolerance (default &lt;code&gt;0.015&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;feature_gap_tol&lt;/code&gt; &lt;em&gt;(int)&lt;/em&gt; â€” tolerance in &lt;strong&gt;consecutive scans&lt;/strong&gt; without signal inside a feature (default &lt;strong&gt;&lt;code&gt;10&lt;/code&gt;&lt;/strong&gt; in &lt;code&gt;Params&lt;/code&gt;; see note below about &lt;code&gt;PARAMETER_DEFAULT&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;batch_size&lt;/code&gt; &lt;em&gt;(int)&lt;/em&gt; â€” parallel processing batch size (default &lt;code&gt;100&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;percent_cpu_to_use&lt;/code&gt; &lt;em&gt;(float)&lt;/em&gt; â€” fraction of CPU to use (default &lt;code&gt;0.8&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Feature Grouping&lt;span class=&#34;absolute -mt-20&#34; id=&#34;feature-grouping&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#feature-grouping&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;group_features_single_file&lt;/code&gt; &lt;em&gt;(bool)&lt;/em&gt; â€” group features within a single file (default &lt;code&gt;False&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scan_scan_cor_tol&lt;/code&gt; &lt;em&gt;(float)&lt;/em&gt; â€” scan-to-scan correlation threshold (default &lt;code&gt;0.7&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mz_tol_feature_grouping&lt;/code&gt; &lt;em&gt;(float)&lt;/em&gt; â€” m/z tolerance for grouping (default &lt;strong&gt;&lt;code&gt;0.015&lt;/code&gt;&lt;/strong&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rt_tol_feature_grouping&lt;/code&gt; &lt;em&gt;(float)&lt;/em&gt; â€” RT tolerance for grouping (default &lt;code&gt;0.1&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;valid_charge_states&lt;/code&gt; &lt;em&gt;(list[int])&lt;/em&gt; â€” allowed charge states (default &lt;code&gt;[1]&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Feature Alignment&lt;span class=&#34;absolute -mt-20&#34; id=&#34;feature-alignment&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#feature-alignment&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mz_tol_alignment&lt;/code&gt; &lt;em&gt;(float)&lt;/em&gt; â€” m/z tolerance for alignment (default &lt;code&gt;0.01&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rt_tol_alignment&lt;/code&gt; &lt;em&gt;(float)&lt;/em&gt; â€” RT tolerance for alignment (default &lt;code&gt;0.2&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rt_tol_rt_correction&lt;/code&gt; &lt;em&gt;(float)&lt;/em&gt; â€” &lt;strong&gt;expected max RT shift&lt;/strong&gt; for RT correction (default &lt;code&gt;0.5&lt;/code&gt; min).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;correct_rt&lt;/code&gt; &lt;em&gt;(bool)&lt;/em&gt; â€” perform RT correction (default &lt;code&gt;True&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scan_number_cutoff&lt;/code&gt; &lt;em&gt;(int)&lt;/em&gt; â€” minimum non-zero scans to be aligned (default &lt;code&gt;5&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;detection_rate_cutoff&lt;/code&gt; &lt;em&gt;(float)&lt;/em&gt; â€” required detection rate across QC+samples (default &lt;code&gt;0.1&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;merge_features&lt;/code&gt; &lt;em&gt;(bool)&lt;/em&gt; â€” merge near-duplicate features (default &lt;code&gt;True&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mz_tol_merge_features&lt;/code&gt; &lt;em&gt;(float)&lt;/em&gt; â€” m/z tolerance for merging (default &lt;code&gt;0.01&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rt_tol_merge_features&lt;/code&gt; &lt;em&gt;(float)&lt;/em&gt; â€” RT tolerance for merging (default &lt;strong&gt;&lt;code&gt;0.02&lt;/code&gt;&lt;/strong&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;group_features_after_alignment&lt;/code&gt; &lt;em&gt;(bool)&lt;/em&gt; â€” group after alignment (default &lt;strong&gt;&lt;code&gt;True&lt;/code&gt;&lt;/strong&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fill_gaps&lt;/code&gt; &lt;em&gt;(bool)&lt;/em&gt; â€” fill gaps in aligned features (default &lt;code&gt;True&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gap_filling_method&lt;/code&gt; &lt;em&gt;(str)&lt;/em&gt; â€” method used in gap filling (default &lt;code&gt;&amp;quot;local_maximum&amp;quot;&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gap_filling_rt_window&lt;/code&gt; &lt;em&gt;(float)&lt;/em&gt; â€” RT window for finding local maxima (default &lt;code&gt;0.05&lt;/code&gt; min).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isotope_rel_int_limit&lt;/code&gt; &lt;em&gt;(float)&lt;/em&gt; â€” isotope intensity upper limit relative to base peak (default &lt;code&gt;1.5&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Feature Annotation&lt;span class=&#34;absolute -mt-20&#34; id=&#34;feature-annotation&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#feature-annotation&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ms2_library_path&lt;/code&gt; &lt;em&gt;(str | None)&lt;/em&gt; â€” path to MS2 library (&lt;code&gt;.msp&lt;/code&gt; or &lt;code&gt;.pickle&lt;/code&gt;); set to &lt;code&gt;None&lt;/code&gt; if not existing.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fuzzy_search&lt;/code&gt; &lt;em&gt;(bool)&lt;/em&gt; â€” enable fuzzy search (default &lt;code&gt;False&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;consider_rt&lt;/code&gt; &lt;em&gt;(bool)&lt;/em&gt; â€” consider RT in MS2 matching (default &lt;code&gt;False&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rt_tol_annotation&lt;/code&gt; &lt;em&gt;(float)&lt;/em&gt; â€” RT tolerance for annotation (default &lt;code&gt;0.2&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ms2_sim_tol&lt;/code&gt; &lt;em&gt;(float)&lt;/em&gt; â€” MS2 similarity threshold (default &lt;code&gt;0.7&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;spectral_similarity_method&lt;/code&gt; &lt;em&gt;(str)&lt;/em&gt; â€” similarity method (default &lt;code&gt;&amp;quot;unweighted_entropy&amp;quot;&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Normalization&lt;span class=&#34;absolute -mt-20&#34; id=&#34;normalization&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#normalization&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sample_normalization&lt;/code&gt; &lt;em&gt;(bool)&lt;/em&gt; â€” sample-wise normalization by total amount/concentration (default &lt;code&gt;False&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sample_norm_method&lt;/code&gt; &lt;em&gt;(str)&lt;/em&gt; â€” method for sample normalization (default &lt;code&gt;&amp;quot;pqn&amp;quot;&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;signal_normalization&lt;/code&gt; &lt;em&gt;(bool)&lt;/em&gt; â€” feature-wise drift correction (default &lt;code&gt;False&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;signal_norm_method&lt;/code&gt; &lt;em&gt;(str)&lt;/em&gt; â€” drift correction method (default &lt;code&gt;&amp;quot;lowess&amp;quot;&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Statistics&lt;span class=&#34;absolute -mt-20&#34; id=&#34;statistics&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#statistics&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;run_statistics&lt;/code&gt; &lt;em&gt;(bool)&lt;/em&gt; â€” run statistical analysis (default &lt;code&gt;False&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Visualization&lt;span class=&#34;absolute -mt-20&#34; id=&#34;visualization&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#visualization&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;plot_bpc&lt;/code&gt; &lt;em&gt;(bool)&lt;/em&gt; â€” plot BPC chromatograms (default &lt;code&gt;False&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;plot_ms2&lt;/code&gt; &lt;em&gt;(bool)&lt;/em&gt; â€” plot MS2 mirror plots (default &lt;code&gt;False&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;plot_normalization&lt;/code&gt; &lt;em&gt;(bool)&lt;/em&gt; â€” plot normalization results (default &lt;code&gt;False&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Classifier Building&lt;span class=&#34;absolute -mt-20&#34; id=&#34;classifier-building&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#classifier-building&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;by_group_name&lt;/code&gt; &lt;em&gt;(str | None)&lt;/em&gt; â€” group name for classifier training (if used).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Output&lt;span class=&#34;absolute -mt-20&#34; id=&#34;output&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#output&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;output_single_file&lt;/code&gt; &lt;em&gt;(bool)&lt;/em&gt; â€” export processed single-file outputs (default &lt;code&gt;False&lt;/code&gt;; set &lt;code&gt;True&lt;/code&gt; during workflow prep).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;output_ms1_scans&lt;/code&gt; &lt;em&gt;(bool)&lt;/em&gt; â€” export all MS1 scans to pickle for fast reloading (default &lt;code&gt;False&lt;/code&gt;; set &lt;code&gt;True&lt;/code&gt; during workflow prep).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;output_aligned_file&lt;/code&gt; &lt;em&gt;(bool)&lt;/em&gt; â€” export aligned features (default &lt;code&gt;False&lt;/code&gt;; set &lt;code&gt;True&lt;/code&gt; during workflow prep).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;quant_method&lt;/code&gt; &lt;em&gt;(str)&lt;/em&gt; â€” &lt;code&gt;&amp;quot;peak_height&amp;quot;&lt;/code&gt; (default), &lt;code&gt;&amp;quot;peak_area&amp;quot;&lt;/code&gt;, or &lt;code&gt;&amp;quot;top_average&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Methods&lt;span class=&#34;absolute -mt-20&#34; id=&#34;methods&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#methods&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;&lt;code&gt;read_parameters_from_csv(path)&lt;/code&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;read_parameters_from_csvpath&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#read_parameters_from_csvpath&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Reads a CSV of keyâ€“value pairs and sets attributes. Values convertible to &lt;code&gt;float&lt;/code&gt; are cast; otherwise, &lt;code&gt;&amp;quot;true&amp;quot;/&amp;quot;yes&amp;quot;&lt;/code&gt; â†’ &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;&amp;quot;false&amp;quot;/&amp;quot;no&amp;quot;&lt;/code&gt; â†’ &lt;code&gt;False&lt;/code&gt;. Calls &lt;code&gt;check_parameters()&lt;/code&gt; afterward.&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;read_sample_metadata(path)&lt;/code&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;read_sample_metadatapath&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#read_sample_metadatapath&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Loads sample metadata from CSV. Lower-cases columns named &lt;code&gt;&amp;quot;is_qc&amp;quot;&lt;/code&gt; and &lt;code&gt;&amp;quot;is_blank&amp;quot;&lt;/code&gt;; converts &lt;code&gt;&amp;quot;yes&amp;quot;/&amp;quot;no&amp;quot;&lt;/code&gt; strings to booleans (otherwise defaults both columns to &lt;code&gt;False&lt;/code&gt;). Sorts so &lt;strong&gt;QC appear first&lt;/strong&gt; and &lt;strong&gt;blanks last&lt;/strong&gt;; adds &lt;code&gt;VALID&lt;/code&gt; and &lt;code&gt;ABSOLUTE_PATH&lt;/code&gt; columns; stores in &lt;code&gt;sample_metadata&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;_untargeted_metabolomics_workflow_preparation()&lt;/code&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;_untargeted_metabolomics_workflow_preparation&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#_untargeted_metabolomics_workflow_preparation&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Prepares a project for the &lt;strong&gt;untargeted metabolomics&lt;/strong&gt; workflow:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Validates &lt;code&gt;project_dir&lt;/code&gt;; derives standard subdirectories and creates them if missing.&lt;/li&gt;
&lt;li&gt;Ensures raw data exist in &lt;code&gt;project_dir/data&lt;/code&gt; (currently auto-detects only &lt;strong&gt;&lt;code&gt;.mzML&lt;/code&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;code&gt;.mzXML&lt;/code&gt;&lt;/strong&gt;).&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;sample_table.csv&lt;/code&gt; is missing, disables normalization/statistics and prints notices.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;parameters.csv&lt;/code&gt; is missing, prints notices, infers &lt;code&gt;(ms_type, ion_mode)&lt;/code&gt; from the first sample via &lt;code&gt;find_ms_info&lt;/code&gt;, calls &lt;code&gt;set_default&lt;/code&gt;, and enables &lt;code&gt;plot_bpc&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Loads sample table if present; otherwise builds from discovered file basenames. Validates presence of raw files, computes acquisition &lt;code&gt;time&lt;/code&gt; via &lt;code&gt;get_start_time&lt;/code&gt;, filters invalid, sorts by time, adds sequential &lt;code&gt;analytical_order&lt;/code&gt;, and assigns batch IDs via &lt;code&gt;label_batch_id&lt;/code&gt;. Writes &lt;code&gt;project_files/sample_table_with_time.csv&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Sets output toggles: &lt;code&gt;output_single_file=True&lt;/code&gt;, &lt;code&gt;output_ms1_scans=True&lt;/code&gt;, &lt;code&gt;output_aligned_file=True&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;&lt;code&gt;set_default(ms_type, ion_mode)&lt;/code&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;set_defaultms_type-ion_mode&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#set_defaultms_type-ion_mode&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;For &lt;code&gt;&amp;quot;orbitrap&amp;quot;&lt;/code&gt;, sets &lt;code&gt;ms1_abs_int_tol=30000&lt;/code&gt;, &lt;code&gt;ms2_abs_int_tol=10000&lt;/code&gt;; for others, &lt;code&gt;ms1_abs_int_tol=1000&lt;/code&gt;, &lt;code&gt;ms2_abs_int_tol=500&lt;/code&gt;. Also sets &lt;code&gt;ion_mode&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;check_parameters()&lt;/code&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;check_parameters&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#check_parameters&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Validates all numeric parameters against &lt;code&gt;PARAMETER_RAGES&lt;/code&gt;. If a value is &lt;strong&gt;out of range&lt;/strong&gt;, it prints a warning and resets that parameter to the value in &lt;code&gt;PARAMETER_DEFAULT&lt;/code&gt;. If &lt;code&gt;ms2_library_path&lt;/code&gt; does &lt;strong&gt;not&lt;/strong&gt; exist, sets it to &lt;code&gt;None&lt;/code&gt;. Casts &lt;code&gt;batch_size&lt;/code&gt; to &lt;code&gt;int&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The code refers to &lt;code&gt;PARAMETER_RAGES&lt;/code&gt; throughout (typo intentional to match the implementation).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;&lt;code&gt;output_parameters(path, format=&amp;quot;json&amp;quot;)&lt;/code&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;output_parameterspath-formatjson&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#output_parameterspath-formatjson&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Exports &lt;strong&gt;all&lt;/strong&gt; parameters (except &lt;code&gt;project_dir&lt;/code&gt;) to JSON, including &lt;code&gt;&amp;quot;MassCube_version&amp;quot;&lt;/code&gt; obtained from &lt;code&gt;importlib.metadata.version(&amp;quot;masscube&amp;quot;)&lt;/code&gt;. Only &lt;code&gt;&amp;quot;json&amp;quot;&lt;/code&gt; is supported.&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;_check_raw_files_in_data_dir()&lt;/code&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;_check_raw_files_in_data_dir&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#_check_raw_files_in_data_dir&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Cross-references basenames from &lt;code&gt;sample_metadata&lt;/code&gt; with files in &lt;code&gt;sample_dir&lt;/code&gt; (currently only &lt;code&gt;.mzML&lt;/code&gt;/&lt;code&gt;.mzXML&lt;/code&gt;), sets &lt;code&gt;VALID&lt;/code&gt; and populates &lt;code&gt;ABSOLUTE_PATH&lt;/code&gt; accordingly.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Functions&lt;span class=&#34;absolute -mt-20&#34; id=&#34;functions&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#functions&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;&lt;code&gt;find_ms_info(file_name)&lt;/code&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;find_ms_infofile_name&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#find_ms_infofile_name&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Reads up to the first 200 lines of an &lt;strong&gt;&lt;code&gt;.mzML&lt;/code&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;code&gt;.mzXML&lt;/code&gt;&lt;/strong&gt; file (lower-cased text) to infer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ms_type&lt;/code&gt;: &lt;code&gt;&amp;quot;orbitrap&amp;quot;&lt;/code&gt; if it contains &lt;code&gt;&amp;quot;orbitrap&amp;quot;&lt;/code&gt;/&lt;code&gt;&amp;quot;q exactive&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;tripletof&amp;quot;&lt;/code&gt; if &lt;code&gt;&amp;quot;tripletof&amp;quot;&lt;/code&gt;, else &lt;code&gt;&amp;quot;qtof&amp;quot;&lt;/code&gt; if contains &lt;code&gt;&amp;quot;tof&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ion_mode&lt;/code&gt;: &lt;code&gt;&amp;quot;positive&amp;quot;&lt;/code&gt; or &lt;code&gt;&amp;quot;negative&amp;quot;&lt;/code&gt; if mentioned.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;centroid&lt;/code&gt;: &lt;code&gt;True&lt;/code&gt; if &lt;code&gt;&amp;quot;centroid spectrum&amp;quot;&lt;/code&gt; or &lt;code&gt;centroided=&amp;quot;1&amp;quot;&lt;/code&gt; present.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Returns &lt;code&gt;(ms_type, ion_mode, centroid)&lt;/code&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Constants&lt;span class=&#34;absolute -mt-20&#34; id=&#34;constants&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#constants&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;&lt;code&gt;PARAMETER_RAGES&lt;/code&gt; â€” Valid Ranges&lt;span class=&#34;absolute -mt-20&#34; id=&#34;parameter_rages--valid-ranges&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#parameter_rages--valid-ranges&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;PARAMETER_RAGES&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;mz_lower_limit&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;100000.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;mz_upper_limit&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;100000.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;rt_lower_limit&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;10000.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;rt_upper_limit&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;10000.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;centroid_mz_tol&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;ms1_abs_int_tol&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1e10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;ms2_abs_int_tol&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1e10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;ms2_rel_int_tol&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;precursor_mz_offset&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;100000.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;mz_tol_ms1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.02&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;mz_tol_ms2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.02&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;feature_gap_tol&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;scan_scan_cor_tol&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;mz_tol_alignment&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.02&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;rt_tol_alignment&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;2.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;scan_number_cutoff&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;detection_rate_cutoff&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;mz_tol_merge_features&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.02&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;rt_tol_merge_features&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;ms2_sim_tol&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;&lt;code&gt;PARAMETER_DEFAULT&lt;/code&gt; â€” Defaults Used on Reset&lt;span class=&#34;absolute -mt-20&#34; id=&#34;parameter_default--defaults-used-on-reset&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#parameter_default--defaults-used-on-reset&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;PARAMETER_DEFAULT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;mz_lower_limit&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;mz_upper_limit&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;100000.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;rt_lower_limit&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;rt_upper_limit&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;10000.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;centroid_mz_tol&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.005&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;ms1_abs_int_tol&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1000.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;ms2_abs_int_tol&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;500&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;ms2_rel_int_tol&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.01&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;precursor_mz_offset&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;2.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;mz_tol_ms1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.01&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;mz_tol_ms2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.015&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;feature_gap_tol&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;scan_scan_cor_tol&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;mz_tol_alignment&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.01&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;rt_tol_alignment&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;scan_number_cutoff&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;detection_rate_cutoff&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;mz_tol_merge_features&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.01&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;rt_tol_merge_features&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.05&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;ms2_sim_tol&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;0.7&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Discrepancy note:&lt;/strong&gt; In the &lt;code&gt;Params&lt;/code&gt; initializer, &lt;code&gt;feature_gap_tol&lt;/code&gt; defaults to &lt;strong&gt;&lt;code&gt;10&lt;/code&gt;&lt;/strong&gt;, whereas &lt;code&gt;PARAMETER_DEFAULT[&amp;quot;feature_gap_tol&amp;quot;]&lt;/code&gt; is &lt;strong&gt;&lt;code&gt;30&lt;/code&gt;&lt;/strong&gt;. If &lt;code&gt;check_parameters()&lt;/code&gt; resets values (due to range violations), it will use the &lt;strong&gt;&lt;code&gt;30&lt;/code&gt;&lt;/strong&gt; from &lt;code&gt;PARAMETER_DEFAULT&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2&gt;Additional Notes &amp;amp; Gotchas&lt;span class=&#34;absolute -mt-20&#34; id=&#34;additional-notes--gotchas&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#additional-notes--gotchas&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Raw file discovery&lt;/strong&gt; in workflow prep and path validation currently recognizes only &lt;code&gt;.mzML&lt;/code&gt; and &lt;code&gt;.mzXML&lt;/code&gt; files, even though &lt;code&gt;file_format&lt;/code&gt; supports &lt;code&gt;&amp;quot;mzjson&amp;quot;&lt;/code&gt;/&lt;code&gt;&amp;quot;mzjson.gz&amp;quot;&lt;/code&gt; in principle.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;group_features_after_alignment&lt;/code&gt; is &lt;strong&gt;&lt;code&gt;True&lt;/code&gt;&lt;/strong&gt; in the initializer (despite an inline comment that mentions &lt;code&gt;False&lt;/code&gt;), and &lt;code&gt;gap_filling_method&lt;/code&gt; is the string &lt;code&gt;&amp;quot;local_maximum&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;ms2_library_path&lt;/code&gt; points to a &lt;strong&gt;non-existent&lt;/strong&gt; path, it is automatically set to &lt;code&gt;None&lt;/code&gt; during parameter checking.&lt;/li&gt;
&lt;li&gt;Exported JSON via &lt;code&gt;output_parameters()&lt;/code&gt; omits &lt;code&gt;project_dir&lt;/code&gt; and includes a &lt;code&gt;&amp;quot;MassCube_version&amp;quot;&lt;/code&gt; field.&lt;/li&gt;
&lt;li&gt;The code consistently uses the identifier &lt;code&gt;PARAMETER_RAGES&lt;/code&gt; (with a &lt;strong&gt;G&lt;/strong&gt;), and method docs reflect that spelling.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;This documentation mirrors the current &lt;code&gt;params.py&lt;/code&gt; implementation.&lt;/em&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>raw_data_utils</title>
      <link>https://example.org/docs/api/raw_data_utils/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/api/raw_data_utils/</guid>
      <description>
        
        
        &lt;h2&gt;Overview&lt;span class=&#34;absolute -mt-20&#34; id=&#34;overview&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#overview&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;raw_data_utils&lt;/code&gt; module provides classes and functions for reading and processing raw mass spectrometry (MS) data files. The module supports reading mzML, mzXML, mzjson, and compressed mzjson files. The main class in this module is &lt;code&gt;MSData&lt;/code&gt;, which models a single MS file and processes the raw data. The module also includes helper functions for cleaning MS/MS spectra, centroiding m/z and intensity sequences, and extracting EIC data.&lt;/p&gt;
&lt;h2&gt;Classes&lt;span class=&#34;absolute -mt-20&#34; id=&#34;classes&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#classes&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;&lt;code&gt;MSData&lt;/code&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;msdata&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#msdata&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;A class that models a single raw MS data file and processes the raw data.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Attributes:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scans&lt;/code&gt; (list): A list of &lt;code&gt;Scan&lt;/code&gt; objects for mass spectra.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ms1_idx&lt;/code&gt; (list): Scan indexes of MS1 spectra.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ms1_time_arr&lt;/code&gt; (list): Time of MS1 scans.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ms2_idx&lt;/code&gt; (list): Scan indexes of MS2 spectra.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;params&lt;/code&gt; (Params object): A &lt;code&gt;Params&lt;/code&gt; object that contains all parameters.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;base_peak_arr&lt;/code&gt; (list): Base peak chromatogram, &lt;code&gt;[[m/z, intensity], ...]&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;features&lt;/code&gt; (list): A list of features.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;feature_mz_arr&lt;/code&gt; (numpy array): m/z of all ROIs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Methods:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;read_raw_data(self, file_name, params=None, scan_levels=[1,2], centroid_mz_tol=0.005, ms1_abs_int_tol=None, ms2_abs_int_tol=None, ms2_rel_int_tol=0.01, precursor_mz_offset=2)&lt;/code&gt;: Reads raw data from an MS file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extract_scan_mzml(self, scans)&lt;/code&gt;: Extracts all scans from an mzML file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extract_scan_mzxml(self, scans)&lt;/code&gt;: Extracts all scans from an mzXML file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;drop_ms1_ions_by_intensity(self, int_tol)&lt;/code&gt;: Drops ions in all MS1 scans by intensity threshold.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;detect_features(self)&lt;/code&gt;: Runs feature detection.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;segment_features(self, iteration=2)&lt;/code&gt;: Segments features by edge detection.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;summarize_features(self, cal_g_score=True, cal_a_score=True)&lt;/code&gt;: Processes features to calculate summary statistics.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;allocate_ms2_to_features(self, mz_tol=0.015)&lt;/code&gt;: Allocates MS2 scans to ROIs.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;drop_features_without_ms2(self)&lt;/code&gt;: Drops features without MS2 scans.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;drop_features_by_length(self, length=5)&lt;/code&gt;: Drops features by length.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;drop_isotope_features(self)&lt;/code&gt;: Drops features annotated as isotopes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;drop_in_source_fragment_features(self)&lt;/code&gt;: Discards in-source fragments.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;plot_bpc(self, time_range=None, label_name=True, output_dir=None)&lt;/code&gt;: Plots the base peak chromatogram.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;output_single_file(self, output_path=None)&lt;/code&gt;: Generates a report for features in csv format.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_eic_data(self, target_mz, target_rt=None, mz_tol=0.005, rt_tol=0.3, rt_range=None)&lt;/code&gt;: Gets the EIC data of a target m/z.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;plot_eics(self, target_mz_arr, target_rt=None, mz_tol=0.005, rt_tol=0.3, rt_range=None, output_file_name=None, show_target_rt=True, ylim: list=None, return_eic_data=False)&lt;/code&gt;: Plots multiple EICs in a single plot.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;find_ms2_by_mzrt(self, mz_target, rt_target, mz_tol=0.01, rt_tol=0.3, return_best=False)&lt;/code&gt;: Finds MS2 scan by precursor m/z and retention time.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;find_feature_by_mzrt(self, mz_target, rt_target=None, mz_tol=0.01, rt_tol=0.3)&lt;/code&gt;: Finds feature by precursor m/z and retention time.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;find_ms1_scan_by_rt(self, rt_target)&lt;/code&gt;: Finds the nearest n MS1 scan by retention time.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;correct_retention_time(self, f)&lt;/code&gt;: Corrects retention time.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;plot_feature(self, feature_idx, mz_tol=0.005, rt_range=[0, np.inf], rt_window=None, output=False)&lt;/code&gt;: Plots EIC of a ROI.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;code&gt;Scan&lt;/code&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;scan&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#scan&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;A class that models a single mass spectrum scan.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Attributes:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;level&lt;/code&gt; (int): Level of mass spectrum.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;id&lt;/code&gt; (int): Scan ID.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scan_time&lt;/code&gt; (float): Scan time.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;signals&lt;/code&gt; (numpy array): m/z and intensity signals.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;precursor_mz&lt;/code&gt; (float): Precursor m/z.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Functions&lt;span class=&#34;absolute -mt-20&#34; id=&#34;functions&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#functions&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;clean_signals&lt;span class=&#34;absolute -mt-20&#34; id=&#34;clean_signals&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#clean_signals&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;clean_signals(signals, mz_range=None, intensity_range=None)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Cleans signals by removing ions outside specified m/z and intensity ranges.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;signals&lt;/code&gt; (numpy array): m/z and intensity signals.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mz_range&lt;/code&gt; (list): m/z range [start, end].&lt;/li&gt;
&lt;li&gt;&lt;code&gt;intensity_range&lt;/code&gt; (list): Intensity range [min, max].&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cleaned_signals&lt;/code&gt; (numpy array): Cleaned m/z and intensity signals.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;centroid_signals&lt;span class=&#34;absolute -mt-20&#34; id=&#34;centroid_signals&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#centroid_signals&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;centroid_signals(signals, mz_tol)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Centroids m/z and intensity signals.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;signals&lt;/code&gt; (numpy array): m/z and intensity signals.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mz_tol&lt;/code&gt; (float): m/z tolerance.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;centroided_signals&lt;/code&gt; (numpy array): Centroided m/z and intensity signals.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;segment_feature&lt;span class=&#34;absolute -mt-20&#34; id=&#34;segment_feature&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#segment_feature&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;segment_feature(feature, peak_height_tol, distance)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Segments a feature by edge detection.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;feature&lt;/code&gt; (Feature object): A feature.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;peak_height_tol&lt;/code&gt; (int): Peak height tolerance.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;distance&lt;/code&gt; (int): Distance.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;segmented_features&lt;/code&gt; (list): Segmented features.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;detect_features&lt;span class=&#34;absolute -mt-20&#34; id=&#34;detect_features&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#detect_features&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;detect_features(ms_data)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Detects features in MS data.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ms_data&lt;/code&gt; (MSData object): An MSData object.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;features&lt;/code&gt; (list): Detected features.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;find_best_ms2&lt;span class=&#34;absolute -mt-20&#34; id=&#34;find_best_ms2&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#find_best_ms2&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;find_best_ms2(ms2_seq)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Finds the best MS2 scan with the highest total intensity.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ms2_seq&lt;/code&gt; (list): A list of MS2 scans.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;best_ms2&lt;/code&gt; (Scan object): The best MS2 scan.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>stats</title>
      <link>https://example.org/docs/api/stats/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/api/stats/</guid>
      <description>
        
        
        &lt;p&gt;Documentation is under construction. Please check our source code directly for the latest updates.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>utils_functions</title>
      <link>https://example.org/docs/api/utils_functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/api/utils_functions/</guid>
      <description>
        
        
        &lt;h2&gt;Overview&lt;span class=&#34;absolute -mt-20&#34; id=&#34;overview&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#overview&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;utils_functions&lt;/code&gt; module contains utility functions that are commonly used in the data processing and analysis of mass spectrometry data. The module includes functions for generating a sample table, getting timestamps for individual files, converting chemical formulas to m/z values, extracting signals from MS2 spectrum in string format, and converting signals to string format.&lt;/p&gt;
&lt;h2&gt;Functions&lt;span class=&#34;absolute -mt-20&#34; id=&#34;functions&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#functions&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;generate_sample_table&lt;span class=&#34;absolute -mt-20&#34; id=&#34;generate_sample_table&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#generate_sample_table&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;generate_sample_table(path=None, output=True)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Generate a sample table from the mzML or mzXML files in the specified path. The stucture of the path should be:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;path
â”œâ”€â”€ data
â”‚   â”œâ”€â”€ sample1.mzml
â”‚   â”œâ”€â”€ sample2.mzml
â”‚   â””â”€â”€ ...
â””â”€â”€ ...&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt; : str
Path to the main directory that contains a subdirectory &amp;lsquo;data&amp;rsquo; with mzML or mzXML files.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;output&lt;/code&gt; : bool
If True, output the sample table to a csv file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Return:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sample_table&lt;/code&gt; : pandas DataFrame
A DataFrame with two columns: &amp;lsquo;Sample&amp;rsquo; and &amp;lsquo;Groups&amp;rsquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sample_table.csv&lt;/code&gt; : csv file
A csv file with two columns: &amp;lsquo;Sample&amp;rsquo; and &amp;lsquo;Groups&amp;rsquo; in the specified path.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;get_timestamps&lt;span class=&#34;absolute -mt-20&#34; id=&#34;get_timestamps&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#get_timestamps&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;get_timestamps(path=None, output=True)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Get timestamps for individual files and sort the files by time. The stucture of the path should be:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;path
â”œâ”€â”€ data
â”‚   â”œâ”€â”€ sample1.mzml
â”‚   â”œâ”€â”€ sample2.mzml
â”‚   â””â”€â”€ ...
â””â”€â”€ ...&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt; : str
Path to the main directory that contains a subdirectory &amp;lsquo;data&amp;rsquo; with mzML or mzXML files.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;output&lt;/code&gt; : bool
If True, output the timestamps to a txt file with two columns: &amp;lsquo;file_name&amp;rsquo; and &amp;lsquo;aquisition_time&amp;rsquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Return:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;file_times&lt;/code&gt; : list
A list of tuples with two elements: &amp;lsquo;file_name&amp;rsquo; and &amp;lsquo;aquisition_time&amp;rsquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;timestamps.txt&lt;/code&gt; : txt file
A txt file with two columns: &amp;lsquo;file_name&amp;rsquo; and &amp;lsquo;aquisition_time&amp;rsquo; in the specified path.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;formula_to_mz&lt;span class=&#34;absolute -mt-20&#34; id=&#34;formula_to_mz&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#formula_to_mz&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;formula_to_mz(formula, adduct, charge)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Calculate the m/z value of a molecule given its chemical formula, adduct and charge.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;formula&lt;/code&gt; : str
Chemical formula of the molecule.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;adduct&lt;/code&gt; : str
Adduct of the molecule. The first character should be &amp;lsquo;+&amp;rsquo; or &amp;lsquo;-&amp;rsquo;. In particular,
for adduct like [M-H-H2O]-, use &amp;lsquo;-H3O&amp;rsquo; or &amp;lsquo;-H2OH&amp;rsquo;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;charge&lt;/code&gt; : int
Charge of the molecule. Positive for cations and negative for anions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mz&lt;/code&gt; : float
The m/z value of the molecule.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;formula_to_mz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;C6H12O6&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;+H&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 181.070665&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;formula_to_mz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;C9H14N3O8P&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;-H2OH&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 304.034010&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;get_start_time&lt;span class=&#34;absolute -mt-20&#34; id=&#34;get_start_time&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#get_start_time&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;get_start_time(file_name)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Function to get the start time of the raw data.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;file_name&lt;/code&gt; : str
Absolute path of the raw data.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;extract_signals_from_string&lt;span class=&#34;absolute -mt-20&#34; id=&#34;extract_signals_from_string&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#extract_signals_from_string&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;extract_signals_from_string(ms2)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Extract signals from MS2 spectrum in string format.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ms2&lt;/code&gt; : str
MS2 spectrum in string format. Format: &amp;ldquo;mz1;intensity1|mz2;intensity2|&amp;hellip;&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;peaks&lt;/code&gt; : numpy.array
Peaks in numpy array format: [[mz1, intensity1], [mz2, intensity2], &amp;hellip;]&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;convert_signals_to_string&lt;span class=&#34;absolute -mt-20&#34; id=&#34;convert_signals_to_string&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#convert_signals_to_string&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;convert_signals_to_string(signals)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Convert peaks to string format.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;signals&lt;/code&gt; : numpy.array
MS2 signals organized as [[mz1, intensity1], [mz2, intensity2], &amp;hellip;]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;string&lt;/code&gt; : str
Converted signals in string format. Format: &amp;ldquo;mz1;intensity1|mz2;intensity2|&amp;hellip;&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>visualization</title>
      <link>https://example.org/docs/api/visualization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/api/visualization/</guid>
      <description>
        
        
        &lt;p&gt;This documentation is under construction. Please check our source code directly for the latest updates.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>workflows</title>
      <link>https://example.org/docs/api/workflows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/api/workflows/</guid>
      <description>
        
        
        &lt;h2&gt;Overview&lt;span class=&#34;absolute -mt-20&#34; id=&#34;overview&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#overview&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This module provides premade data processing workflows for untargeted metabolomics analysis. The workflows include feature detection, alignment, annotation, normalization, and statistical analysis. The module also includes functions for batch file processing and evaluating the data quality of raw files.&lt;/p&gt;
&lt;h2&gt;Functions&lt;span class=&#34;absolute -mt-20&#34; id=&#34;functions&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#functions&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;process_single_file&lt;span class=&#34;absolute -mt-20&#34; id=&#34;process_single_file&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#process_single_file&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;process_single_file(file_name, params=None, segment_feature=True, group_features=False, evaluate_peak_shape=True, annotate_ms2=False, ms2_library_path=None, output_dir=None)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Performs untargeted feature detection for a single file.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;file_name&lt;/code&gt; (str): Path to the raw file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;params&lt;/code&gt; (Params object, optional): Parameters for feature detection. If &lt;code&gt;None&lt;/code&gt;, the default parameters are used based on the type of mass spectrometer.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;segment_feature&lt;/code&gt; (bool, default &lt;code&gt;True&lt;/code&gt;): Whether to segment the feature to peaks for distinguishing possible isomers.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;group_features&lt;/code&gt; (bool, default &lt;code&gt;False&lt;/code&gt;): Whether to group features by isotopes, adducts, and in-source fragments.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;evaluate_peak_shape&lt;/code&gt; (bool, default &lt;code&gt;True&lt;/code&gt;): Whether to evaluate the peak shape by calculating noise score and asymmetry factor.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;annotate_ms2&lt;/code&gt; (bool, default &lt;code&gt;False&lt;/code&gt;): Whether to annotate MS2 spectra.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ms2_library_path&lt;/code&gt; (str, optional): Path to the MS2 library.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;output_dir&lt;/code&gt; (str, optional): The output directory for the single file. If &lt;code&gt;None&lt;/code&gt;, the output is saved to the same directory as the raw file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;d&lt;/code&gt; (MSData object): An MSData object containing the processed data.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# use default parameters for processing a single file&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;feature_detection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;sample.mzML&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;untargeted_metabolomics_workflow&lt;span class=&#34;absolute -mt-20&#34; id=&#34;untargeted_metabolomics_workflow&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#untargeted_metabolomics_workflow&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;untargeted_metabolomics_workflow(path=None, return_results=False, only_process_single_files=False, return_params_only=False)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The untargeted metabolomics workflow.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt; (str, optional): The working directory. If &lt;code&gt;None&lt;/code&gt;, the current working directory is used.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;return_results&lt;/code&gt; (bool, default &lt;code&gt;False&lt;/code&gt;): Whether to return the results.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;only_process_single_files&lt;/code&gt; (bool, default &lt;code&gt;False&lt;/code&gt;): Whether to only process the single files.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;return_params_only&lt;/code&gt; (bool, default &lt;code&gt;False&lt;/code&gt;): Whether to return the parameters only.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Returns:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;features&lt;/code&gt; (list): A list of features.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;params&lt;/code&gt; (Params object): Parameters for the workflow.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;untargeted_metabolomics_workflow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/path/to/project&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;batch_file_processing&lt;span class=&#34;absolute -mt-20&#34; id=&#34;batch_file_processing&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#batch_file_processing&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;batch_file_processing(path=None, segment_feature=True, group_features=False, evaluate_peak_shape=True, annotate_ms2=True, ms2_library_path=None, cpu_ratio=0.8, batch_size=100)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Process single files using default parameters. This function is useful for batch processing of multiple files. Files from different ion modes are allowed, but parameters cannot be specified for individual files, and default parameters are used.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt; (str, optional): The working directory. If &lt;code&gt;None&lt;/code&gt;, the current working directory is used.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;segment_feature&lt;/code&gt; (bool, default &lt;code&gt;True&lt;/code&gt;): Whether to segment the feature to peaks for distinguishing possible isomers.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;group_features&lt;/code&gt; (bool, default &lt;code&gt;False&lt;/code&gt;): Whether to group features by isotopes, adducts, and in-source fragments.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;evaluate_peak_shape&lt;/code&gt; (bool, default &lt;code&gt;True&lt;/code&gt;): Whether to evaluate the peak shape by calculating noise score and asymmetry factor.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;annotate_ms2&lt;/code&gt; (bool, default &lt;code&gt;True&lt;/code&gt;): Whether to annotate MS2 spectra.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ms2_library_path&lt;/code&gt; (str, optional): The path to the MS2 library.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cpu_ratio&lt;/code&gt; (float, default &lt;code&gt;0.8&lt;/code&gt;): The percentage of CPU cores to use.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;batch_size&lt;/code&gt; (int, default &lt;code&gt;100&lt;/code&gt;): The number of files to process in each batch.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;run_evaluation&lt;span class=&#34;absolute -mt-20&#34; id=&#34;run_evaluation&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#run_evaluation&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;run_evaluation(path=None, zscore_threshold=-2)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Evaluate the run and report the problematic files. The path to the project directory should be organized as follows:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;path
â”œâ”€â”€ single_files
â”‚   â”œâ”€â”€ sample1.txt
â”‚   â”œâ”€â”€ sample2.txt
â”‚   â””â”€â”€ ...
â””â”€â”€ ...&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;where single_files contains the processed files in txt format.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;path&lt;/code&gt; (str, optional): Path to the project directory.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zscore_threshold&lt;/code&gt; (float, default &lt;code&gt;-2&lt;/code&gt;): The threshold of z-score for detecting problematic files.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>mzpkl</title>
      <link>https://example.org/docs/api/mzpkl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/api/mzpkl/</guid>
      <description>
        
        
        &lt;h2&gt;Overview&lt;span class=&#34;absolute -mt-20&#34; id=&#34;overview&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#overview&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This module defines the structure of the &lt;code&gt;mzpkl&lt;/code&gt; file format, which is a temporary file format used to store the raw MS data
for faster reloading. The &lt;code&gt;mzpkl&lt;/code&gt; file format is a pickle file that is organized this way:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;{
    &amp;#34;name&amp;#34;: str, # the name of the file
    &amp;#34;ion_mode&amp;#34;: str, # the ion mode of the file
    &amp;#34;ms1_time_arr&amp;#34;: np.ndarray, # the time array of the MS1 scans
    &amp;#34;ms1_idx&amp;#34;: np.ndarray, # the index array of the MS1 scans
    &amp;#34;ms2_idx&amp;#34;: np.ndarray, # the index array of the MS2 scans
    &amp;#34;scans&amp;#34;: list of 2D np.ndarray # MS1 and MS2 scans in the file. Each scan is a 2D np.ndarray with shape (n, 2), [[m/z, intensity], ...]
}&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Functions&lt;span class=&#34;absolute -mt-20&#34; id=&#34;functions&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#functions&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;Convert MS Data object to mzpkl&lt;span class=&#34;absolute -mt-20&#34; id=&#34;convert-ms-data-object-to-mzpkl&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#convert-ms-data-object-to-mzpkl&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;convert_MSData_to_mzpkl(d, output_dir: str = None)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Converts an &lt;code&gt;MSData&lt;/code&gt; object to an &lt;code&gt;mzpkl&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;d&lt;/code&gt; (MSData): The MSData object to be converted.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;output_dir&lt;/code&gt; (str): The directory where the &lt;code&gt;mzpkl&lt;/code&gt; file will be saved.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the converted &lt;code&gt;mzpkl&lt;/code&gt; file will be saved in the specified directory.&lt;/li&gt;
&lt;li&gt;if the output directory is not specified, the &lt;code&gt;mzpkl&lt;/code&gt; file will be returned as a dictionary.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Read mzpkl to MS Data object&lt;span class=&#34;absolute -mt-20&#34; id=&#34;read-mzpkl-to-ms-data-object&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#read-mzpkl-to-ms-data-object&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;read_mzpkl_to_MSData(d, file_path: str)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Reads an &lt;code&gt;mzpkl&lt;/code&gt; file to an &lt;code&gt;MSData&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameters:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;d&lt;/code&gt; (MSData): The initiated MSData object without scans data.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_path&lt;/code&gt; (str): The path to the &lt;code&gt;mzpkl&lt;/code&gt; file.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>network</title>
      <link>https://example.org/docs/api/network/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/api/network/</guid>
      <description>
        
        
        &lt;p&gt;Documentation is under construction. Please check our source code directly for the latest updates.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
